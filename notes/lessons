When running CFR+ on system with card abstraction, important to only floor
the regrets once per iteration at the end of the iteration (rather than
every time we update the regret of a bucket).

Exploration sometimes helps unsafe endgame solving a lot.  Believe it's
cases where there are subtrees that are not reached (or barely reached).
A common scenario is when P1 learns to never open-limp.

Forcing CBR values to be zero-sum can improve CFR-D results.

maxmargin underperforming CFR-D currently

Unsafe endgame solving sometimes outperforms CFR-D, and sometimes vice
versa.

Combined method of endgame solving works well.

Blending in uniform range helps.

Best to use zero-summed bucket-level CBRs for "T" values.

Seems like we don't need a very rich card abstraction for the streets that
we are replacing with a resolved strategy.  Compare nhs3 and
hshshshsbc3 for holdem5/mb2b2s100.

Getting rid of limp options seems to hurt exploitability by ~15 mbb/g.
See asymmetric_results.

A 40:1 card abstraction reduction seems to cost us ~110 mbb/g of
exploitability on the flop.  See abstraction_results.

Seems like we can have a 6:1 card abstraction reduction which will
cost us ~10 mbb/g of exploitability on the flop.  See abstraction_results.

Seems like we can only get a null abstraction for big pots and still get
a big chunk of the possible exploitability reduction.  See mixed_results.

Having only one bet for target player is good enough once the pot
get sufficiently large.  0.2 * all-in-pot-size is a better test of
"sufficiently large" than 1/9 * all-in-pot-size.  See asymmetric_results.

It works really well to do the following.  Give the opp a range of bets
like 1 BB, 4 BB, 16 BB, 64 BB, etc.  Use translation to get strategies
for the in-between bet sizes.  Seems to be very little loss in
exploitability.  Update: this is only true when there is a single bet
to interpolate.

Imperfect recall
* Exploitability harmed a lot when we introduce imperfect recall.
  From 1000 mbb/g to 9000 mbb/g, for example.
* Heads-up, aggressive reentrancy loses about 70 mbb/g compared
  to no reentrancy (mb3b3r0 vs. mb3b3).  Betting tree is around
  1/70 the size of the non-reentrant tree.
* Using merge rules, can reduce that.
  * mr5 tree is 1/4 the size of the non-reentrant tree, and loss is around
    30 mbb/g.
  * mr4 tree is 1/15 the size of the non-reentrant tree, and loss is around
    50 mbb/g
  * Is this a lot or a little?
* Can dedicate space savings of reentrant tree to card abstraction.
  So I tried mr4 with null card abstraction, but it appears I gained nothing.
* Doing reentrancy only on later streets - even just on river - seems to
  offer no benefit over doing reentrancy on all streets.

Multiplayer
* On mb1b1, lose surprisingly little with aggressive reentrancy.
  About 23 mbb/g (mb1b1r0 vs. mb1b1).
* mr3 on mb2b2r0 gains us ~17 mbb/g but makes the tree 109 times bigger.
* Bigger card abstraction (100x) but smaller betting abstraction
  (~100x smaller; no mr3) yields advantage of about 10 mbb/g.

When we are very far from equilibrium, the current strategy beats the
cumulative strategy.  As we get closer to equilibrium, the gap narrows.

Current strategy also does better than the cumulative strategy when using
an abstracted strategy against a near-equilibrium unabstracted strategy.

Quantizing river regrets to one byte seems to work fine.
